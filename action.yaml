---
name: "checkout-gerrit-change"
description: "Checkout a mirrored Gerrit change"

inputs:
  gerrit-refspec:
    description: "The Gerrit refspec for the change, eg: refs/changes/YY/NNYY/Z"
    required: true
  gerrit-project:
    description: "The project in Gerrit"
    required: true
  delay:
    description: "Delay in seconds to wait to make sure replication has finished. Default: 10s"
    required: false
    default: "10s"
  fetch-depth:
    description: "Number of commits to fetch. 0 indicates all history for all branches and tags. Default 1"
    required: false
    default: "1"
  repository:
    description: "Repository name with owner. For example actions/checkout"
    required: false
    default: ${{ github.repository }}
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event. Otherwise, uses the default branch.
    required: false
    default: ${{ github.sha }}
  token:
    description: >
      Personal Access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.

      We recommend using a service account with the least permissions necessary.
      Also, when generating a new PAT, select the least scopes necessary.
    default: ${{ github.token }}
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or
      `recursive` to recursively checkout submodules.

      Default: false
    default: "false"

runs:
  using: "composite"
  steps:
    - id: delay-checkout
      run: sleep ${{ inputs.delay }}
      shell: bash
    - uses: actions/checkout@v3
      with:
        fetch-depth: ${{ inputs.fetch-depth }}
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        token: ${{ inputs.token }}
        submodules: ${{ inputs.submodules }}
    - id: gerrit-checkout
      shell: bash -x --noprofile --norc {0}
      run: |
        report_error_and_exit()
        {
          default="fatal: couldn't find remote ref ${{ inputs.gerrit-refspec }}"
          message=${1:-$default}
          echo "$message"
          # Log GitHub annotation
          echo "::error::$message"
          exit 1
        }

        fetch_from_gerrit()
        {
          if [ "${GERRIT_URL}x" == "x" ]
          then
            report_error_and_exit "$1"
          fi

          error=$(git fetch ${GERRIT_URL}${{ inputs.gerrit-project }} ${{ inputs.gerrit-refspec }} 2>&1 > /dev/null)
          exit_code=$?
          if [ $exit_code -ne 0 ]
          then
            report_error_and_exit "$error"
          fi
        }

        error=$(git fetch origin ${{ inputs.gerrit-refspec }})
        exit_code=$?
        if [ $exit_code -ne 0 ]
        then
          fetch_from_gerrit "$error"
        fi
        git checkout FETCH_HEAD
